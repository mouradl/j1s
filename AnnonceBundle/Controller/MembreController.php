<?phpnamespace Tuni\AnnonceBundle\Controller;use Symfony\Component\HttpFoundation\Request;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;use Tuni\AnnonceBundle\Entity\Membre;use Tuni\AnnonceBundle\Entity\Utilisateur;use Tuni\AnnonceBundle\Entity\StatutMembre;use Tuni\AnnonceBundle\Form\MembreType;use Tuni\AnnonceBundle\Form\UtilisateurType;use Symfony\Component\HttpFoundation\Response;/** * Membre controller. * * @Route("/membre") */class MembreController extends Controller{    /**     * Lists all Membre entities.     *     * @Route("/", name="tuni_membre")     * @Method("GET")     * @Template()     */    public function indexAction()    {        $em = $this->getDoctrine()->getManager();        $query = $em->createQueryBuilder();        $idp=$query->select('a.id')              ->from('TuniAnnonceBundle:StatutMembre', 'a')              ->where($query->expr()->like('a.statut', $query->expr()->literal('%Particulier%')))              ->getQuery()              ->getSingleScalarResult();        $query2 = $em->createQueryBuilder();        $query2->select('a')              ->from('TuniAnnonceBundle:Membre', 'a')              ->where("a.statutMembre = $idp")              ->getQuery();       $query3 = $em->createQuery("    SELECT a, k    FROM TuniAnnonceBundle:Membre a    JOIN a.statutMembre k    where a.statutMembre = $idp");        $paginator  = $this->get('knp_paginator');    $pagination = $paginator->paginate(        $query3,        $this->get('request')->query->get('page', 1)/*page number*/,        10/*limit per page*/    );    $total = $query2->select('COUNT(a)')                    ->getQuery()                    ->getSingleScalarResult();    // parameters to template      return $this->render('TuniAnnonceBundle:Membre:listeMembre.html.twig',array('page'=>'particular_Member','pagination' => $pagination,'total' => $total));        }        /**     * Lists all Membre entities.     *     * @Route("/", name="tuni_membres")     * @Method("GET")     * @Template()     */    public function membresAction()    {        $em = $this->getDoctrine()->getManager();        $query2 = $em->createQueryBuilder();        $query2->select('a')              ->from('TuniAnnonceBundle:Membre', 'a')              ->getQuery();       $query = $em->createQuery("    SELECT a, k    FROM TuniAnnonceBundle:Membre a    JOIN a.statutMembre k ");        $paginator  = $this->get('knp_paginator');    $pagination = $paginator->paginate(        $query,        $this->get('request')->query->get('page', 1)/*page number*/,        10/*limit per page*/    );    $total = $query2->select('COUNT(a)')                    ->getQuery()                    ->getSingleScalarResult();    // parameters to template      return $this->render('TuniAnnonceBundle:Membres:listeMembre.html.twig',array('page'=>'Members','pagination' => $pagination,'total' => $total));        }     public function getRefererParams() {        $request = $this->container->get('request');        //$request = $this->getRequest();        $referer = $request->headers->get('referer');        $baseUrl = $request->getBaseUrl();        $lastPath = substr($referer, strpos($referer, $baseUrl) + strlen($baseUrl));        return $this->container->get('router')->getMatcher()->match($lastPath);    }    /**     * Creates a new Membre entity.     *     * @Route("/create", name="tuni_membre_create")     * @Method("POST")     * @Template("TuniAnnonceBundle:Membre:new.html.twig")     */    public function createAction(Request $request)    {   $Utilisateur = new Utilisateur();        $formUtilisateur     = $this->createForm(new UtilisateurType(), $Utilisateur);        $entity  = new Membre();        $form = $this->createForm(new MembreType(), $entity);        $form->bind($request);        $formUtilisateur->bind($request);                        if ($form->isValid()) {            $em = $this->getDoctrine()->getManager();                 $queryx = $em->createQuery('SELECT a.id FROM TuniAnnonceBundle:Utilisateur a WHERE  a.email =\''.$Utilisateur->getEmail().'\' OR a.username =\''.$Utilisateur->getUsername().'\' ');    	$resultats = $queryx->getResult();            //var_dump($resultats);        if(count($resultats))	  {  $this->get('session')->setFlash(            'notice',            ' ERREUR ,Compte existe déjas avec l\'email '.$Utilisateur->getEmail().' ou le nom d\'utlisateur '.$Utilisateur->getUsername().' ! '        );$_SESSION['compte'] = 'Compte existe déjas avec l\'email '.$Utilisateur->getEmail().' ou le nom d\'utlisateur '.$Utilisateur->getUsername().' ! ';        return $this->redirect($this->generateUrl('tuni_annonce_homepage'));          }            if ($_POST["type_membre"]=="Jobeur") {                $Utilisateur->setRoles(array('ROLE_PARTICULIER'));            }            else {                $Utilisateur->setRoles(array('ROLE_PROFESSIONNEL'));            }                                     $userManager = $this->container->get('fos_user.user_manager');                         $usertemp = $userManager->createUser();                                                 $usertemp->setRoles($Utilisateur->getRoles());                         $usertemp->setUsername($Utilisateur->getUsername());                         $usertemp->setEmail($Utilisateur->getEmail());                         $usertemp->setPlainPassword($Utilisateur->getPassword());//                         $usertemp->setLocked(FALSE);                         $usertemp->setEnabled(FALSE);//                         $usertemp->setCredentialsExpired(FALSE);//                                                  $userManager->updateUser($usertemp);                         $repository = $this->getDoctrine()                                        ->getEntityManager()                                        ->getRepository('TuniAnnonceBundle:Utilisateur');                          $utilisateurCree=$repository->findOneBy(array('email' => $Utilisateur->getEmail()));            $entity->setUtilisateur($utilisateurCree);           $repositoryStatutMembre = $this->getDoctrine()                                        ->getEntityManager()                                        ->getRepository('TuniAnnonceBundle:StatutMembre');                          $StatutMembre=$repositoryStatutMembre->findOneBy(array('statut' =>'Particulier'));                        $entity->setStatutMembre($StatutMembre);                        $d = new \DateTime('now');            $z = $d->format('Y-m-d H:i:s');            if($entity->getLogo()!=NULL)            $entity->uploadImage();            $certarray=array(0=>FALSE,1=>FALSE,2=>FALSE,3=>FALSE);            $entity->setCertificationArray($certarray);            $entity->setRegistredUser($d);                         //confirmer le parrainage si existe                                                $entityparrain  = $em->getRepository('TuniAnnonceBundle:Membre')->findOneBy(array('filleul' => $usertemp->getEmail()));                        if($entityparrain)                        {                                /* TODO */                            $entity->setParrain($entityparrain->getUtilisateur()->getEmail());                             $entityparrain->setIsConfirmedParrain(true);                             $em->persist($entityparrain);                            $em->flush();                             $emailuser=$usertemp->getEmail();                            $from = "contact@juste1service.leizart.com";                            $message = \Swift_Message::newInstance()                            ->setSubject("Confirmation de parrainage J1S")                            ->setFrom($from)                            ->setTo($entityparrain->getUtilisateur()->getEmail())                            ->setBody("Parrainage de ".$emailuser." effectué avec succée",'text/html')                            ;                            $sent=$this->get('mailer')->send($message);                                    if($sent)    $this->get('session')->setFlash(                                                                    'noticeparrainage',                                                                     'Parrainage réalisé avec succée'                                                                  );                        }               $em->persist($entity);               $em->flush();                        $this->get('session')->setFlash(                                                    'compte',                                                     'Le membre a été creé avec succée'                                                  );                                                if ($this->container->getParameter('fos_user.registration.confirmation.enabled')) {                $this->container->get('session')->set('fos_user_send_confirmation_email/email', $usertemp->getEmail());                               return $this->redirect($this->generateUrl('fos_user_registration_check_email'));                                                 }                        $this->container->get('fos_user.security.login_manager')->loginUser(                $this->container->getParameter('fos_user.firewall_name'),                $usertemp,                NULL);                                    return $this->redirect($this->generateUrl('tuni_annonce_homepage'));        }        $_SESSION['compte'] = 'Le membre n\'a été pas crée, entrez des informations valide'; $this->get('session')->setFlash(                                                    'compte',                                                     'Erreur,Le membre n\'a été pas crée'                                                  );                return $this->redirect($this->generateUrl('tuni_annonce_homepage'));    }    /**     * Displays a form to create a new Membre entity.     *     * @Route("/new", name="tuni_membre_new")     * @Method("GET")     * @Template()     */    public function newAction()    {        $entity = new Membre();        $formMembre   = $this->createForm(new MembreType(), $entity);        $Utilisateur = new Utilisateur();        $form     = $this->createForm(new UtilisateurType(), $Utilisateur);      return  array_merge($this->init(), array(            'entity' => $entity,            'form'   => $form->createView(),            'formMembre' => $formMembre->createView(),            'page'=>'particular_Member'        ));             }    /**     * Finds and displays a Membre entity.     *     * @Route("/{id}/show", name="tuni_membre_show")     * @Method("GET")     * @Template()     */    public function showAction($id)    {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAnnonceBundle:Membre')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Membre entity.');        }        $deleteForm = $this->createDeleteForm($id);        return array(            'entity'      => $entity,            'delete_form' => $deleteForm->createView(),            'page'=>'particular_Member'        );    } /**     * Finds and displays a Membre entity.     *     * @Route("/{id}/membresshow", name="tuni_membres_show")     * @Method("GET")     * @Template()     */    public function membresshowAction($id)    {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAnnonceBundle:Membre')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Membre entity.');        }        $deleteForm = $this->createDeleteForm($id);                 return $this->render('TuniAnnonceBundle:Membres:show.html.twig',array(            'entity'      => $entity,            'delete_form' => $deleteForm->createView(),            'page'=>'particular_Member'        ));        }    /**     * Displays a form to edit an existing Membre entity.     *     * @Route("/{id}/edit", name="tuni_membre_edit")     * @Method("GET")     * @Template()     */    public function editAction($id)    {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAnnonceBundle:Membre')->findOneBy(array('utilisateur' =>$id));        if (!$entity) {            throw $this->createNotFoundException('Unable to find Membre entity.');        }        $Utilisateur = $entity->getUtilisateur();        $form     = $this->createForm(new UtilisateurType(), $Utilisateur);        $editForm = $this->createForm(new MembreType(), $entity);        $deleteForm = $this->createDeleteForm($entity->getId());                $query2 = $em->createQueryBuilder();        $query2->select('a')              ->from('TuniAnnonceBundle:Annonce', 'a')                            ->getQuery();       $query3 = $em->createQuery("    SELECT a, k    FROM TuniAnnonceBundle:Annonce a    JOIN a.typeAnnonce k    JOIN a.sousCat s    WHERE a.membre=    ".$entity->getId());               $paginator  = $this->get('knp_paginator');    $pagination = $paginator->paginate(        $query3,        $this->get('request')->query->get('page', 1)/*page number*/,        10/*limit per page*/    );        $total = $query2->select('COUNT(a)')                    ->getQuery()                    ->getSingleScalarResult();        return array_merge($this->init(), array(            'entityid'      => $entity->getId(),            'edit_form'   => $editForm->createView(),            'form'   => $form->createView(),            'delete_form' => $deleteForm->createView(),            'pagination' => $pagination,            'total' => $total,            'entity' => $entity,            'page'=>'particular_Member'        ));    }    /**     * Edits an existing Membre entity.     *     * @Route("/{id}/update", name="tuni_membre_update")     * @Method("POST")     * @Template("TuniAnnonceBundle:Membre:edit.html.twig")     */    public function updateAction(Request $request, $id)    {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAnnonceBundle:Membre')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Membre entity.');        }        $oldlogo=$entity->getLogo();        $deleteForm = $this->createDeleteForm($id);        $editForm = $this->createForm(new MembreType(), $entity);        $editForm->bind($request);        $Utilisateur = new Utilisateur();        $form     = $this->createForm(new UtilisateurType(), $Utilisateur);        $form->bind($request);        $email=  $Utilisateur->getEmail();        $user = $entity->getUtilisateur();	$username=  $user->getUsernameCanonical();        $ancienMdp = $user->getPassword();	//$editUserForm = $this->createForm(new UtilisateurType(), $user);	        $query = $em->createQuery('SELECT a.id FROM TuniAnnonceBundle:Utilisateur a WHERE a.id <> '.$user->getId().' AND ( a.email =\''.$email.'\' OR a.username =\''.$Utilisateur->getUsername().'\' )');    	$resultats = $query->getResult();            //var_dump($resultats);        if(count($resultats))	  {  $this->get('session')->setFlash(            'compte',            ' ERREUR ,Compte existe déjas avec l\'email '.$Utilisateur->getEmail().' ou le nom d\'utlisateur '.$Utilisateur->getUsername().' ! '        );        return $this->editAction($id);          } 	// gestion du changement -ou non- de mot de passe		$isNewPassword = ($Utilisateur->getPassword()== '')? false : true ;	if(!$isNewPassword){		// réinjection de l'ancien mot de passe dans la requête		$user->setPassword($ancienMdp);	}	        if ($editForm->isValid()) {                         $userManager = $this->container->get('fos_user.user_manager');                         $usertemp = $userManager->findUserByUsernameOrEmail($username);                                                 $usertemp->setUsername($Utilisateur->getUsername());                         $usertemp->setEmail($Utilisateur->getEmail());		if($isNewPassword){			                         $usertemp->setPlainPassword($Utilisateur->getPassword());                                        }                $userManager->updateUser($usertemp);                if(!$isNewPassword){                                $em->persist($user);                $em->flush();                                }                if($entity->getLogo()!=NULL){                    if($oldlogo!=NULL)                        $entity->removeOldImage($oldlogo);                    $entity->uploadImage();                }                else {                    if($oldlogo!=NULL)                        $entity->setLogo($oldlogo);                }            $em->persist($entity);            $em->flush();            $this->get('session')->setFlash(                                                    'compte',                                                     'Le membre a été modifié avec succée'                                                  );            //return $this->redirect($this->generateUrl('membre_edit', array('id' => $id)));            return $this->redirect($this->generateUrl('tuni_annonce_homepage'));        }         $this->get('session')->setFlash(            'compte',            ' ERREUR ,Veuillez saisir de nouveau les coordonées du membre ! '        );        return array(            'entity'      => $entity,            'edit_form'   => $editForm->createView(),            'form'   => $form->createView(),            'delete_form' => $deleteForm->createView(),            'page'=>'particular_Member'        );    }    /**     * Deletes a Membre entity.     *     * @Route("/{id}/delete", name="tuni_membre_delete")     * @Method("GET")     */    public function deleteAction(Request $request, $id)    {                   $em = $this->getDoctrine()->getManager();            $entity = $em->getRepository('TuniAnnonceBundle:Membre')->find($id);            $this->get('session')->setFlash(            'compte',            ' ERREUR de supprission du membre ! '        );            if (!$entity) {                throw $this->createNotFoundException('Unable to find Membre entity.');            }            //var_dump($entity);            $em->remove($entity->getUtilisateur());            $em->remove($entity);            $em->flush();            $this->get('session')->setFlash(                                                    'compte',                                                     'Le membre a été supprimé avec succée'                                                  );                       return $this->redirect($this->generateUrl('membre'));    }/**     * Deletes a Membre entity.     *     * @Route("/{id}/membredelete", name="tuni_membres_delete")     * @Method("GET")     */    public function membresdeleteAction(Request $request, $id)    {                   $em = $this->getDoctrine()->getManager();            $entity = $em->getRepository('TuniAnnonceBundle:Membre')->find($id);            $this->get('session')->setFlash(            'compte',            ' ERREUR de supprission du membre ! '        );            if (!$entity) {                throw $this->createNotFoundException('Unable to find Membre entity.');            }            //var_dump($entity);            $em->remove($entity->getUtilisateur());            $em->remove($entity);            $em->flush();            $this->get('session')->setFlash(                                                    'compte',                                                     'Le membre a été supprimé avec succée'                                                  );                       return $this->redirect($this->generateUrl('membres'));    }    /**     * Creates a form to delete a Membre entity by id.     *     * @param mixed $id The entity id     *     * @return Symfony\Component\Form\Form The form     */    private function createDeleteForm($id)    {        return $this->createFormBuilder(array('id' => $id))            ->add('id', 'hidden')            ->getForm()        ;    }     public function init()    {                $em = $this->getDoctrine()->getManager();        $repository = $this->getDoctrine()                                        ->getManager()                                        ->getRepository('TuniAnnonceBundle:Temoignage');                          $Temoignages=$repository->findBy(array('isPublier' => TRUE));            $Categories = $em->getRepository('TuniAnnonceBundle:Categorie')->findAll();                 $Menus = $em->getRepository('TuniAnnonceBundle:Menu')->findAll();                         $Slides = $em->getRepository('TuniAnnonceBundle:Slider')->findAll();$Socials = $em->getRepository('TuniAnnonceBundle:Social')->findAll();               $Regions = $em->getRepository('TuniAnnonceBundle:Region')->findAll();                          $SousCategories = $em->getRepository('TuniAnnonceBundle:SousCategorie')->findAll();              $query = $em->createQuery("    SELECT a    FROM TuniAnnonceBundle:Annonce a    ORDER BY a.id DESC    ");$query->setMaxResults(20);        $lastAnnonces = $query                    ->getResult();             $membre = NULL;            if ($this->get('security.context')->isGranted('ROLE_USER')) {                //User is logged in                    $user = $this->container->get('security.context')->getToken()->getUser();                $id = $user->getId();                $membre = $em->getRepository('TuniAnnonceBundle:Membre')->findOneBy(array('utilisateur' => $id));            }            return array('membre' => $membre,'Categories'=>$Categories,'Menus' => $Menus, 'Slides' => $Slides, 'Socials' => $Socials,'Regions'=>$Regions,                                                                                        'SousCategories'=>$SousCategories,                                                                                        'Temoignages'=>$Temoignages,                                                                                         'lastAnnonces'=>$lastAnnonces                                                                                            );    }            /**     * .     *     * @Route("/deleteliste", name="membre_deleteliste")     * @Method("post")     *     * @Template()     */    public function deletelisteAction() {        $request = $this->get('request');	 if ($request->isXMLHttpRequest())        //if ('POST' == $request->getMethod())         {             $response = new Response();             $em = $this->getDoctrine()->getEntityManager();                 $exist=FALSE;            $repository = $this->getDoctrine()                ->getEntityManager()                ->getRepository('TuniAnnonceBundle:Membre');                        $Membres=$repository->findAll();                    foreach ($Membres as $Membre) {                    if(array_key_exists('admin_'.$Membre->getId(), $_POST)){                                                    if($_POST['admin_'.$Membre->getId()]){                            $em->remove($Membre->getUtilisateur());                                    $em->remove($Membre);                        $em->flush();                        $exist=TRUE;                        }                 }                                           }            $this->get('session')->setFlash(            'compte',            'Pas de Membre à supprimer!'        );                      if($exist)             $this->get('session')->setFlash(            'compte',            'Les Membres ont été supprimés avec succée'        );                                  return $response;       }}}