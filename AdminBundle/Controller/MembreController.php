<?phpnamespace Tuni\AdminBundle\Controller;use Symfony\Component\HttpFoundation\Request;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;use Tuni\AdminBundle\Entity\Membre;use Tuni\AdminBundle\Entity\Utilisateur;use Tuni\AdminBundle\Entity\StatutMembre;use Tuni\AdminBundle\Form\MembreType;use Tuni\AdminBundle\Form\UtilisateurType;use Tuni\AdminBundle\Form\UtilisateurEditType;/** * Membre controller. * * @Route("/membre") */class MembreController extends Controller{    /**     * Lists all Membre entities.     *     * @Route("/", name="membre")     * @Method("GET")     * @Template()     */    public function indexAction()    {        $em = $this->getDoctrine()->getManager();        $query = $em->createQueryBuilder();        $idp=$query->select('a.id')              ->from('TuniAdminBundle:StatutMembre', 'a')              ->where($query->expr()->like('a.statut', $query->expr()->literal('%Particulier%')))              ->getQuery()              ->getSingleScalarResult();        $query2 = $em->createQueryBuilder();        $query2->select('a')              ->from('TuniAdminBundle:Membre', 'a')              ->where("a.statutMembre = $idp")              ->getQuery();       $query3 = $em->createQuery("    SELECT a, k    FROM TuniAdminBundle:Membre a    JOIN a.utilisateur k    where a.statutMembre = $idp");        $paginator  = $this->get('knp_paginator');    $pagination = $paginator->paginate(        $query3,        $this->get('request')->query->get('page', 1)/*page number*/,        10/*limit per page*/    );    $total = $query2->select('COUNT(a)')                    ->getQuery()                    ->getSingleScalarResult();    // parameters to template      return $this->render('TuniAdminBundle:Membre:listeMembre.html.twig',array('page'=>'particular_Member','pagination' => $pagination,'total' => $total));        }        /**     * Lists all Membre entities.     *     * @Route("/", name="membres")     * @Method("GET")     * @Template()     */    public function membresAction()    {        $em = $this->getDoctrine()->getManager();        $query2 = $em->createQueryBuilder();        $query2->select('a')              ->from('TuniAdminBundle:Membre', 'a')              ->getQuery();       $query = $em->createQuery("    SELECT a, k    FROM TuniAdminBundle:Membre a    JOIN a.utilisateur k    JOIN a.statutMembre s");        $paginator  = $this->get('knp_paginator');    $pagination = $paginator->paginate(        $query,        $this->get('request')->query->get('page', 1)/*page number*/,        10/*limit per page*/    );    $total = $query2->select('COUNT(a)')                    ->getQuery()                    ->getSingleScalarResult();    // parameters to template      return $this->render('TuniAdminBundle:Membres:listeMembre.html.twig',array('page'=>'Members','pagination' => $pagination,'total' => $total));        }    /**     * Creates a new Membre entity.     *     * @Route("/create", name="membre_create")     * @Method("POST")     * @Template("TuniAdminBundle:Membre:new.html.twig")     */    public function createAction(Request $request)    {   $Utilisateur = new Utilisateur();        $formUtilisateur     = $this->createForm(new UtilisateurType(), $Utilisateur);        $entity  = new Membre();        $form = $this->createForm(new MembreType(), $entity);        $form->bind($request);        $formUtilisateur->bind($request);               if ($form->isValid()) {            $em = $this->getDoctrine()->getManager();            $queryx = $em->createQuery('SELECT a.id FROM TuniAdminBundle:Utilisateur a WHERE a.email =\''.$Utilisateur->getEmail().'\' OR a.username =\''.$Utilisateur->getUsername().'\'');    	$resultats = $queryx->getResult();            //var_dump($resultats);        if(count($resultats)&& $entity->getIsNotFake())	  {  $this->get('session')->setFlash(            'notice',            ' ERREUR ,Compte existe déjas avec l\'email '.$Utilisateur->getEmail().' ou le nom d\'utlisateur '.$Utilisateur->getUsername().' ! '        );        return $this->newAction();          }             $Utilisateur->setRoles(array('ROLE_PARTICULIER'));                         $userManager = $this->container->get('fos_user.user_manager');                         $usertemp = $userManager->createUser();                                                 $usertemp->setRoles($Utilisateur->getRoles());                         $usertemp->setUsername($Utilisateur->getUsername());                         $usertemp->setEmail($Utilisateur->getEmail());                         $usertemp->setPlainPassword($Utilisateur->getPassword());//                         $usertemp->setLocked(FALSE);                         $usertemp->setEnabled(TRUE);//                         $usertemp->setCredentialsExpired(FALSE);//                                                  $userManager->updateUser($usertemp);                         $repository = $this->getDoctrine()                                        ->getEntityManager()                                        ->getRepository('TuniAdminBundle:Utilisateur');                          if($entity->getIsNotFake())                         $utilisateurCree=$repository->findOneBy(array('email' => $Utilisateur->getEmail()));                         else                         $utilisateurCree=$repository->findOneBy(array('email' => $Utilisateur->getEmail(),'username' => $Utilisateur->getUsername()));           if(!$utilisateurCree){               $this->get('session')->setFlash(            'notice',            ' ERREUR ,Compte n\'est pas créé'        );        return $this->newAction();           }           $entity->setUtilisateur($utilisateurCree);           $repositoryStatutMembre = $this->getDoctrine()                                        ->getEntityManager()                                        ->getRepository('TuniAdminBundle:StatutMembre');                          $StatutMembre=$repositoryStatutMembre->findOneBy(array('statut' =>'Particulier'));                        $entity->setStatutMembre($StatutMembre);                        $d = new \DateTime('now');            $z = $d->format('Y-m-d H:i:s');            if($entity->getLogo()!=NULL)            $entity->uploadImage();            $certarray=array(0=>FALSE,1=>FALSE,2=>FALSE,3=>FALSE);            $entity->setCertificationArray($certarray);            $entity->setRegistredUser($d);            $em->persist($entity);            $em->flush();                        $this->get('session')->setFlash(                                                    'notice',                                                     'Le membre a été modifié avec succée'                                                  );            return $this->redirect($this->generateUrl('membre'));        }        return array(            'entity' => $entity,            'form'   => $form->createView(),            'page'=>'particular_Member'        );    }    /**     * Displays a form to create a new Membre entity.     *     * @Route("/new", name="membre_new")     * @Method("GET")     * @Template()     */    public function newAction()    {        $entity = new Membre();        $formMembre   = $this->createForm(new MembreType(), $entity);        $Utilisateur = new Utilisateur();        $form     = $this->createForm(new UtilisateurType(), $Utilisateur);        return array(            'entity' => $entity,            'form'   => $form->createView(),            'formMembre' => $formMembre->createView(),            'page'=>'particular_Member'        );    }   /**     * Finds and displays a Membre entity.     *     * @Route("/{id}/show", name="membre_show")     * @Method("GET")     * @Template()     */    public function showAction($id)    {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAdminBundle:Membre')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Membre entity.');        }        $deleteForm = $this->createDeleteForm($id);        return array(            'entity'      => $entity,            'delete_form' => $deleteForm->createView(),            'page'=>'particular_Member'        );    }     /**     * Finds and displays a Membre entity.     *     * @Route("/{id}/certif", name="membre_certif")     * @Method("GET")     * @Template()     */    public function certifAction($id)    {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAnnonceBundle:Membre')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Membre entity.');        }        $deleteForm = $this->createDeleteForm($id);        return array(            'entity'      => $entity,            'delete_form' => $deleteForm->createView(),            'page'=>'particular_Member'        );    }        public function setcertifAction(Request $request)    {   $cert = $request->request->get('cert');        $certid = $request->request->get('idmembre');        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAnnonceBundle:Membre')->find($certid);        $this->get('session')->setFlash(            'notice',            ' ERREUR de configuration du membre ! '        );        if (!$entity) {            $this->get('session')->setFlash(            'notice',            'Unable to find Membre entity.');        }          if(is_array($cert)){            $certarray=array(0=>FALSE,1=>FALSE,2=>FALSE,3=>FALSE);            $indice=0;                        if(isset($cert[0]))            {$indice+=20;$certarray[0]=TRUE;}            if(isset($cert[1]))                {$indice+=20;$certarray[1]=TRUE;}            if(isset($cert[2]))                {$indice+=40;$certarray[2]=TRUE;}            if(isset($cert[3]))                {$indice+=20;$certarray[3]=TRUE;}            $entity->setIndiceConfiance($indice);            $entity->setCertificationArray($certarray);            $em->persist($entity);            $em->flush();              $this->get('session')->setFlash(                                                    'notice',                                                     'Les ceritifications ont été modifié avec succée'                                                  );        }            return $this->redirect($this->generateUrl('membre'));    } /**     * Finds and displays a Membre entity.     *     * @Route("/{id}/membresshow", name="membres_show")     * @Method("GET")     * @Template()     */    public function membresshowAction($id)    {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAdminBundle:Membre')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Membre entity.');        }        $deleteForm = $this->createDeleteForm($id);                 return $this->render('TuniAdminBundle:Membres:show.html.twig',array(            'entity'      => $entity,            'delete_form' => $deleteForm->createView(),            'page'=>'particular_Member'        ));        }    /**     * Displays a form to edit an existing Membre entity.     *     * @Route("/{id}/edit", name="membre_edit")     * @Method("GET")     * @Template()     */    public function editAction($id)    {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAdminBundle:Membre')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Membre entity.');        }        $Utilisateur = $entity->getUtilisateur();        $form     = $this->createForm(new UtilisateurEditType(), $Utilisateur);        $editForm = $this->createForm(new MembreType(), $entity);        $deleteForm = $this->createDeleteForm($id);        return array(            'entity'      => $entity,            'edit_form'   => $editForm->createView(),            'form'   => $form->createView(),            'delete_form' => $deleteForm->createView(),            'page'=>'particular_Member'        );    }    /**     * Edits an existing Membre entity.     *     * @Route("/{id}/update", name="membre_update")     * @Method("POST")     * @Template("TuniAdminBundle:Membre:edit.html.twig")     */    public function updateAction(Request $request, $id)    {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('TuniAdminBundle:Membre')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find Membre entity.');        }        $oldlogo=$entity->getLogo();               $deleteForm = $this->createDeleteForm($id);        $editForm = $this->createForm(new MembreType(), $entity);        $editForm->bind($request);        $Utilisateur = new Utilisateur();        $form     = $this->createForm(new UtilisateurEditType(), $Utilisateur);        $form->bind($request);        $email=  $Utilisateur->getEmail();        $user = $entity->getUtilisateur();	$username=  $user->getUsernameCanonical();        $ancienMdp = $user->getPassword();	//$editUserForm = $this->createForm(new UtilisateurType(), $user);	        $query = $em->createQuery('SELECT a.id FROM TuniAdminBundle:Utilisateur a WHERE a.id <> '.$user->getId().' AND ( a.email =\''.$email.'\' OR a.username =\''.$Utilisateur->getUsername().'\' )');    	$resultats = $query->getResult();            //var_dump($resultats);        if(count($resultats))	  {  $this->get('session')->setFlash(            'notice',            ' ERREUR ,Compte existe déjas avec l\'email '.$Utilisateur->getEmail().' ou le nom d\'utlisateur '.$Utilisateur->getUsername().' ! '        );        return $this->editAction($id);          } 	// gestion du changement -ou non- de mot de passe		$isNewPassword = ($Utilisateur->getPassword()== '')? false : true ;	if(!$isNewPassword){		// réinjection de l'ancien mot de passe dans la requête		$user->setPassword($ancienMdp);	}	        if ($editForm->isValid()) {                         $userManager = $this->container->get('fos_user.user_manager');                         $usertemp = $userManager->findUserByUsernameOrEmail($username);                                                 $usertemp->setUsername($Utilisateur->getUsername());                         $usertemp->setEmail($Utilisateur->getEmail());		if($isNewPassword){			                         $usertemp->setPlainPassword($Utilisateur->getPassword());                                        }                $userManager->updateUser($usertemp);                if(!$isNewPassword){                                $em->persist($user);                $em->flush();                                }                if($entity->getLogo()!=NULL){                    if($oldlogo!=NULL)                        $entity->removeOldImage($oldlogo);                    $entity->uploadImage();                }                else {                    if($oldlogo!=NULL)                        $entity->setLogo($oldlogo);                }            $em->persist($entity);            $em->flush();            $this->get('session')->setFlash(                                                    'notice',                                                     'Le membre a été modifié avec succée'                                                  );            //return $this->redirect($this->generateUrl('membre_edit', array('id' => $id)));            return $this->redirect($this->generateUrl('membre'));        }         $this->get('session')->setFlash(            'notice',            ' ERREUR ,Veuillez saisir de nouveau les coordonées du membre ! '        );        return array(            'entity'      => $entity,            'edit_form'   => $editForm->createView(),            'form'   => $form->createView(),            'delete_form' => $deleteForm->createView(),            'page'=>'particular_Member'        );    }    /**     * Deletes a Membre entity.     *     * @Route("/{id}/delete", name="membre_delete")     * @Method("GET")     */    public function deleteAction(Request $request, $id)    {                   $em = $this->getDoctrine()->getManager();            $entity = $em->getRepository('TuniAdminBundle:Membre')->find($id);            $this->get('session')->setFlash(            'notice',            ' ERREUR de supprission du membre ! '        );            if (!$entity) {                throw $this->createNotFoundException('Unable to find Membre entity.');            }            //var_dump($entity);            $em->remove($entity->getUtilisateur());            $em->remove($entity);            $em->flush();            $this->get('session')->setFlash(                                                    'notice',                                                     'Le membre a été supprimé avec succée'                                                  );                       return $this->redirect($this->generateUrl('membre'));    }/**     * Deletes a Membre entity.     *     * @Route("/{id}/membredelete", name="membres_delete")     * @Method("GET")     */    public function membresdeleteAction(Request $request, $id)    {                   $em = $this->getDoctrine()->getManager();            $entity = $em->getRepository('TuniAdminBundle:Membre')->find($id);            $this->get('session')->setFlash(            'notice',            ' ERREUR de supprission du membre ! '        );            if (!$entity) {                throw $this->createNotFoundException('Unable to find Membre entity.');            }            //var_dump($entity);            $em->remove($entity->getUtilisateur());            $em->remove($entity);            $em->flush();            $this->get('session')->setFlash(                                                    'notice',                                                     'Le membre a été supprimé avec succée'                                                  );                       return $this->redirect($this->generateUrl('membres'));    }    /**     * Creates a form to delete a Membre entity by id.     *     * @param mixed $id The entity id     *     * @return Symfony\Component\Form\Form The form     */    private function createDeleteForm($id)    {        return $this->createFormBuilder(array('id' => $id))            ->add('id', 'hidden')            ->getForm()        ;    }}